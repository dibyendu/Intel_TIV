#!/usr/bin/env python

import re, argparse, subprocess, os

ROOT="@ROOT@"

parser = argparse.ArgumentParser()
parser.add_argument("domain_file", type=str, help="path to the domain file used by the ff planner")
parser.add_argument("problem_file", type=str, help="path to the problem file used by the ff planner")
parser.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")

args = parser.parse_args()

ff_planner_args = [ROOT + '/FF-v2.3/ff', '-o', args.domain_file, '-f', args.problem_file]

proc = subprocess.Popen(ff_planner_args, stdout=subprocess.PIPE)
lines = proc.stdout.read()
searchStr = re.search( r'.*ff:\ found\ legal\ plan\ as\ follows\n\nstep(.*)time\ spent.*', lines, re.S).group(1)
actions = map(lambda x: x.partition(':')[2].strip().lower(), [line.strip() for line in searchStr.split('\n') if line.strip()])
plan = '\n'.join([''.join([action.split()[0]] + map(lambda x: '(' + x + ')', action.split()[1:])) for action in actions])

if args.verbose:
  print '\nThe generated plan is ...\n'
  print plan
  print '\n\n'

plan_file = open('Plan', 'w')
plan_file.write(plan)
plan_file.close()

proc = subprocess.Popen(['python', ROOT + '/src/microtesk_template_generator/TemplateGenerator.py', 'Plan', ROOT], stdout=subprocess.PIPE)
lines = proc.stdout.read()

os.system('rm Plan')

if args.verbose:
  print lines
  print '\nRunning Micro_Tesk ...\n'

os.system('mv ' + ROOT + '/src/microtesk_template_generator/Template.rb ' + ROOT + '/microtesk-2.3.0-alpha/arch/arm/templates')
os.system('export MICROTESK_HOME=' + ROOT + '/microtesk-2.3.0-alpha &&\
	   cd $MICROTESK_HOME &&\
	   sh bin/generate.sh arm arch/arm/templates/Template.rb')
os.system('rm ' + ROOT + '/microtesk-2.3.0-alpha/arch/arm/templates/Template.rb')
os.system('mv ' + ROOT + '/microtesk-2.3.0-alpha/*.asm ' + ROOT)
